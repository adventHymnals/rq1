[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NOAA quarto simple with R",
    "section": "",
    "text": "This is a template for a simple Quarto website that looks like a “book”. This is a common format for documentation. It includes a GitHub Action that will build the website automatically when you make changes to the files. The NOAA palette and fonts has been added to theme.scss. The webpage will be on the gh-pages branch. Serving the website files from this branch is a common way to keep all the website files from cluttering your main branch.\nThe GitHub Action installs R so you can have R code in your qmd or Rmd files. Note, you do not need to make changes to your Rmd files unless your need Quarto features like cross-references."
  },
  {
    "objectID": "index.html#github-set-up",
    "href": "index.html#github-set-up",
    "title": "NOAA quarto simple with R",
    "section": "GitHub Set-up",
    "text": "GitHub Set-up\n\nClick the green “use template” button to make a repository with this content. Make sure to make your repo public (since GitHub Pages doesn’t work on private repos unless you have a paid account) and check box to include all the branches (so that you get the gh-pages branch). \nTurn on GitHub Pages under Settings > Pages . You will set pages to be made from the gh-pages branch and root directory. \nTurn on GitHub Actions under Settings > Actions > General \nEdit the repo description and Readme to add a link to the webpage. When you edit the description, you will see the link url in the url box or you can click on the Actions tab or the Settings > Pages page to find the url."
  },
  {
    "objectID": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html",
    "href": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html",
    "title": "Using Csycms Format hymnals in Quarto",
    "section": "",
    "text": "Csycms is a flat file content management system for nodejs which we developed about 4 to 5 years back in 2018. It has served us well hosting both the sites for Advent Hymnals as well as the Sabbath School Lessons Archive before we moved it to github pages. And now we have to retire it. While we could keep improving it to keep up with our current needs, that will be time and resources not wisely spent. We have now fully adopted github pages as our host for advent hymnals, and mainly because it is free. While there are several options available for us to use gh-pages, it seems to us at the moment, especially between quarto and jekyll that quarto is the better for us of the two. Here we explain how to use the the hymnals in the csycms format they are currently in in quarto. The reason for maintaining that format is so that there is just a single set of documents to easy any editing work that might be done which can be used across a wide range of tools. And the choice of using csycms means that we will also later need to explain how to create the csycms document structure for any new hymnals whichmay need to be added."
  },
  {
    "objectID": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#downloading-the-hymnals-repository",
    "href": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#downloading-the-hymnals-repository",
    "title": "Using Csycms Format hymnals in Quarto",
    "section": "1. Downloading the hymnals repository",
    "text": "1. Downloading the hymnals repository\nThe first step is to download the hymnals list available in a yaml format. The hymnals list contains also links to blogs. The blogs are available in jekyll format instead of csycms.\nwget -O hymnals.yaml https://raw.githubusercontent.com/adventHymnals/hymnals/master/hymnals.yaml\n\nInstalling yq\nsudo wget https://github.com/mikefarah/yq/releases/download/v4.4.1/yq_linux_amd64 -O /usr/bin/yq &&\\\nsudo chmod +x /usr/bin/yq\nyq e ‘. | keys’ hymnals.yaml | while read -r line ; do\nhymnal=$(echo \\(line |cut -b 3-) # - blog -> blog  #echo \"==>::\\)hymnal” # check if gtLink is available gtLink=\\((yq e \".\\)hymnal.gtLink” hymnals.yaml) if [ “\\(gtLink\" != \"null\" ]; then  gtLink=\"https://github.com/\\)gtLink.git”\nlink=$(yq e \".$hymnal.link\"  hymnals.yaml)\n# clone if hymnal is available\necho \"==>::$hymnal::$link::$gtLink\"\nrm -rf \"$link\" && git clone $gtLink $link\nfi\n #echo \"==>::$hymnal$link\"\ndone"
  },
  {
    "objectID": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#downloading-individual-hymnals",
    "href": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#downloading-individual-hymnals",
    "title": "Using Csycms Format hymnals in Quarto",
    "section": "2. Downloading individual hymnals",
    "text": "2. Downloading individual hymnals\nBut as we work on the migration, there may be need to migrate our csycms system from one server to another. So here are the instructions incase this need should arise."
  },
  {
    "objectID": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#requirements",
    "href": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#requirements",
    "title": "Using Csycms Format hymnals in Quarto",
    "section": "Requirements",
    "text": "Requirements\n\nAn ubuntu server\nNode.js >=14.0.0 <18.0.0\nNginx. You can use Apache or any other webserver of your choice. But we only have configurations for nginx.\ncertbot\n\nOne you have set up these requirements, you are good to go. If you are not sure how to go about it you can check out the instructions elsewhere in the internet."
  },
  {
    "objectID": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#installation",
    "href": "jekyll/blog/2023-01-12-using-csycms-format-hymnals-in-quarto.html#installation",
    "title": "Using Csycms Format hymnals in Quarto",
    "section": "Installation",
    "text": "Installation\nFirst install csycms:\nnpm install -g csycms\nThen initialize it and create service files:\nsudo csycms init\nThen install advent hymnals site:\ncsycms site --create -n adventhymnals -p 8710 -r https://github.com/GospelSounders/adventhymnals.git -d adventhymnals.org\nThen make changes to configurations in /etc/csycms/sites-enabled/adventhymnals.yml. A working configuration is found here\nsudo /etc/csycms/sites-enabled/adventhymnals.yml\nBe sure to change: - domain. Assets will not be loaded if this is wrong - scheme. If this is wrong, assets will not be loaded properly. - site.space - site.title - copyright.title - copyright.url - copyright.name\nNow its time to setup nginx to act as a proxy to our csycms server. Sample configuration is found here. You can have it either an independent file in the nginx config directory or set it up as a block in the main config. Since it redirects all traffic to ssl, you will need to get some ssl certificates. You will use certbot for this.\nsudo certbot certonly --nginx -d adventhymnals.org\nNow restart both csycms and nginx:\nsudo systemctl restart nginx\nsudo systemctl restart csycms"
  },
  {
    "objectID": "jekyll/blog/abc.html",
    "href": "jekyll/blog/abc.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "This repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland."
  },
  {
    "objectID": "jekyll/blog/hosting-advent-hymnals-in-csycms-server.html",
    "href": "jekyll/blog/hosting-advent-hymnals-in-csycms-server.html",
    "title": "Setting up a Csycms Server for Hosting Advent Hymnals",
    "section": "",
    "text": "Csycms is a flat file content management system for nodejs which we developed about 4 to 5 years back in 2018. It has served us well hosting both the sites for Advent Hymnals as well as the Sabbath School Lessons Archive before we moved it to github pages. And now we have to retire it. While we could keep improving it to keep up with our current needs, that will be time and resources not wisely spent. We have now fully adopted github pages as our host for advent hymnals, and mainly because it is free. But as we work on the migration, there may be need to migrate our csycms system from one server to another. So here are the instructions incase this need should arise."
  },
  {
    "objectID": "jekyll/blog/hosting-advent-hymnals-in-csycms-server.html#requirements",
    "href": "jekyll/blog/hosting-advent-hymnals-in-csycms-server.html#requirements",
    "title": "Setting up a Csycms Server for Hosting Advent Hymnals",
    "section": "Requirements",
    "text": "Requirements\n\nAn ubuntu server\nNode.js >=14.0.0 <18.0.0\nNginx. You can use Apache or any other webserver of your choice. But we only have configurations for nginx.\ncertbot\n\nOne you have set up these requirements, you are good to go. If you are not sure how to go about it you can check out the instructions elsewhere in the internet."
  },
  {
    "objectID": "jekyll/blog/hosting-advent-hymnals-in-csycms-server.html#installation",
    "href": "jekyll/blog/hosting-advent-hymnals-in-csycms-server.html#installation",
    "title": "Setting up a Csycms Server for Hosting Advent Hymnals",
    "section": "Installation",
    "text": "Installation\nFirst install csycms:\nnpm install -g csycms\nThen initialize it and create service files:\nsudo csycms init\nThen install advent hymnals site:\ncsycms site --create -n adventhymnals -p 8710 -r https://github.com/GospelSounders/adventhymnals.git -d adventhymnals.org\nThen make changes to configurations in /etc/csycms/sites-enabled/adventhymnals.yml. A working configuration is found here\nsudo /etc/csycms/sites-enabled/adventhymnals.yml\nBe sure to change: - domain. Assets will not be loaded if this is wrong - scheme. If this is wrong, assets will not be loaded properly. - site.space - site.title - copyright.title - copyright.url - copyright.name\nNow its time to setup nginx to act as a proxy to our csycms server. Sample configuration is found here. You can have it either an independent file in the nginx config directory or set it up as a block in the main config. Since it redirects all traffic to ssl, you will need to get some ssl certificates. You will use certbot for this.\nsudo certbot certonly --nginx -d adventhymnals.org\nNow restart both csycms and nginx:\nsudo systemctl restart nginx\nsudo systemctl restart csycms"
  },
  {
    "objectID": "content/rendering.html",
    "href": "content/rendering.html",
    "title": "Rendering",
    "section": "",
    "text": "The repo includes a GitHub Action that will render (build) the website automatically when you make changes to the files. It will be pushed to the gh-pages branch.\nBut when you are developing your content, you will want to render it locally."
  },
  {
    "objectID": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "href": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "title": "Rendering",
    "section": "Step 1. Make sure you have a recent RStudio",
    "text": "Step 1. Make sure you have a recent RStudio\nHave you updated RStudio since about August 2022? No? Then update to a newer version of RStudio. In general, you want to keep RStudio updated and it is required to have a recent version to use Quarto."
  },
  {
    "objectID": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "href": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "title": "Rendering",
    "section": "Step 2. Clone and create RStudio project",
    "text": "Step 2. Clone and create RStudio project\nFirst, clone the repo onto your local computer. How? You can click File > New Project and then select “Version Control”. Paste in the url of the repository. That will clone the repo on to your local computer. When you make changes, you will need to push those up."
  },
  {
    "objectID": "content/rendering.html#step-3.-render-within-rstudio",
    "href": "content/rendering.html#step-3.-render-within-rstudio",
    "title": "Rendering",
    "section": "Step 3. Render within RStudio",
    "text": "Step 3. Render within RStudio\nRStudio will recognize that this is a Quarto project by the presence of the _quarto.yml file and will see the “Build” tab. Click the “Render website” button to render to the _site folder.\nPreviewing: You can either click index.html in the _site folder and specify “preview in browser” or set up RStudio to preview to the viewer panel. To do the latter, go to Tools > Global Options > R Markdown. Then select “Show output preview in: Viewer panel”."
  },
  {
    "objectID": "content/acknowledgements.html",
    "href": "content/acknowledgements.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "This repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland."
  },
  {
    "objectID": "content/add-content.html",
    "href": "content/add-content.html",
    "title": "Customize",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation)."
  },
  {
    "objectID": "content/add-content.html#add-your-pages-the-project",
    "href": "content/add-content.html#add-your-pages-the-project",
    "title": "Customize",
    "section": "Add your pages the project",
    "text": "Add your pages the project\n\nAdd the files to _quarto.yml"
  },
  {
    "objectID": "content/publishing.html",
    "href": "content/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps."
  },
  {
    "objectID": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "Turn on GitHub Pages for your repo",
    "text": "Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings > Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings > Actions > General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up"
  },
  {
    "objectID": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "Do your first publish to gh-pages",
    "text": "Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch."
  },
  {
    "objectID": "content/publishing.html#dont-like-using-gh-pages",
    "href": "content/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "Don’t like using gh-pages?",
    "text": "Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings > Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\""
  },
  {
    "objectID": "content/customizing.html",
    "href": "content/customizing.html",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation."
  },
  {
    "objectID": "content/customizing.html#examples",
    "href": "content/customizing.html#examples",
    "title": "Customization",
    "section": "Examples",
    "text": "Examples\nLooking at other people’s Quarto code is a great way to figure out how to do stuff. Most will have a link to a GitHub repo where you can see the raw code. Look for a link to edit page or see source code. This will usually be on the right. Or look for the GitHub icon somewhere.\n\nQuarto gallery\nnmfs-openscapes\nFaye lab manual\nquarto-titlepages Note the link to edit is broken. Go to repo and look in documentation directory."
  },
  {
    "objectID": "content/hosting-advent-hymnals-in-csycms-server.html",
    "href": "content/hosting-advent-hymnals-in-csycms-server.html",
    "title": "Setting up a Csycms Server for Hosting Advent Hymnals",
    "section": "",
    "text": "Csycms is a flat file content management system for nodejs which we developed about 4 to 5 years back in 2018. It has served us well hosting both the sites for Advent Hymnals as well as the Sabbath School Lessons Archive before we moved it to github pages. And now we have to retire it. While we could keep improving it to keep up with our current needs, that will be time and resources not wisely spent. We have now fully adopted github pages as our host for advent hymnals, and mainly because it is free. But as we work on the migration, there may be need to migrate our csycms system from one server to another. So here are the instructions incase this need should arise."
  },
  {
    "objectID": "content/hosting-advent-hymnals-in-csycms-server.html#requirements",
    "href": "content/hosting-advent-hymnals-in-csycms-server.html#requirements",
    "title": "Setting up a Csycms Server for Hosting Advent Hymnals",
    "section": "Requirements",
    "text": "Requirements\n\nAn ubuntu server\nNode.js >=14.0.0 <18.0.0\nNginx. You can use Apache or any other webserver of your choice. But we only have configurations for nginx.\ncertbot\n\nOne you have set up these requirements, you are good to go. If you are not sure how to go about it you can check out the instructions elsewhere in the internet."
  },
  {
    "objectID": "content/hosting-advent-hymnals-in-csycms-server.html#installation",
    "href": "content/hosting-advent-hymnals-in-csycms-server.html#installation",
    "title": "Setting up a Csycms Server for Hosting Advent Hymnals",
    "section": "Installation",
    "text": "Installation\nFirst install csycms:\nnpm install -g csycms\nThen initialize it and create service files:\nsudo csycms init\nThen install advent hymnals site:\ncsycms site --create -n adventhymnals -p 8710 -r https://github.com/GospelSounders/adventhymnals.git -d adventhymnals.org\nThen make changes to configurations in /etc/csycms/sites-enabled/adventhymnals.yml. A working configuration is found here\nsudo /etc/csycms/sites-enabled/adventhymnals.yml\nBe sure to change: - domain. Assets will not be loaded if this is wrong - scheme. If this is wrong, assets will not be loaded properly. - site.space - site.title - copyright.title - copyright.url - copyright.name\nNow its time to setup nginx to act as a proxy to our csycms server. Sample configuration is found here. You can have it either an independent file in the nginx config directory or set it up as a block in the main config. Since it redirects all traffic to ssl, you will need to get some ssl certificates. You will use certbot for this.\nsudo certbot certonly --nginx -d adventhymnals.org\nNow restart both csycms and nginx:\nsudo systemctl restart nginx\nsudo systemctl restart csycms"
  }
]